package http

import (
	"fmt"
)

const (
	// ErrMethodNotAllowed
	ErrMethodNotAllowed = "method not allowed"

	// ErrInternalServerError
	ErrInternalServerError = "internal server error"

	// ErrNotAuthorized
	ErrNotAuthorized = "not authorized"

	// ErrNotImplemented
	ErrNotImplemented = "not implemented"
)

type Error interface {
	error
	Code() int
}

// Error represents an error generated by an HTTP handler.
type httpError struct {
	// Code is an HTTP status code corresponding to the error
	code int

	// Message is a human-readable message that describes the error
	message string
}

// NewHTTPError
func NewError(code int, message string) Error {
	return &httpError{code, message}
}

// Error returns a string representation for the Error type
func (e *httpError) Error() string {
	return fmt.Sprintf("%s", e.message)
}

// Code
func (e *httpError) Code() int {
	return e.code
}
