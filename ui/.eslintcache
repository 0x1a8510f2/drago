[{"/home/eschmidt/Workspace/seashell/drago/ui/src/index.js":"1","/home/eschmidt/Workspace/seashell/drago/ui/src/serviceWorker.js":"2","/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/apollo-provider.js":"3","/home/eschmidt/Workspace/seashell/drago/ui/src/utils/toast-provider.js":"4","/home/eschmidt/Workspace/seashell/drago/ui/src/styles/index.js":"5","/home/eschmidt/Workspace/seashell/drago/ui/src/components/toast/index.js":"6","/home/eschmidt/Workspace/seashell/drago/ui/src/views/app/index.js":"7","/home/eschmidt/Workspace/seashell/drago/ui/src/views/not-found/index.js":"8","/home/eschmidt/Workspace/seashell/drago/ui/src/environment.js":"9","/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/local-state.js":"10","/home/eschmidt/Workspace/seashell/drago/ui/src/styles/themes/light.js":"11","/home/eschmidt/Workspace/seashell/drago/ui/src/assets/index.js":"12","/home/eschmidt/Workspace/seashell/drago/ui/src/components/icon-button/index.js":"13","/home/eschmidt/Workspace/seashell/drago/ui/src/views/home/index.js":"14","/home/eschmidt/Workspace/seashell/drago/ui/src/views/settings/index.js":"15","/home/eschmidt/Workspace/seashell/drago/ui/src/components/text/index.js":"16","/home/eschmidt/Workspace/seashell/drago/ui/src/components/box/index.js":"17","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/index.js":"18","/home/eschmidt/Workspace/seashell/drago/ui/src/components/flex/index.js":"19","/home/eschmidt/Workspace/seashell/drago/ui/src/containers/header/index.js":"20","/home/eschmidt/Workspace/seashell/drago/ui/src/containers/side-nav/index.js":"21","/home/eschmidt/Workspace/seashell/drago/ui/src/containers/footer/index.js":"22","/home/eschmidt/Workspace/seashell/drago/ui/src/assets/icons/index.js":"23","/home/eschmidt/Workspace/seashell/drago/ui/src/assets/illustrations/index.js":"24","/home/eschmidt/Workspace/seashell/drago/ui/src/containers/side-nav/brand.js":"25","/home/eschmidt/Workspace/seashell/drago/ui/src/containers/side-nav/styled.js":"26","/home/eschmidt/Workspace/seashell/drago/ui/src/views/settings/tokens/index.js":"27","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/list/index.js":"28","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/details/index.js":"29","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/new/index.js":"30","/home/eschmidt/Workspace/seashell/drago/ui/src/components/link/index.js":"31","/home/eschmidt/Workspace/seashell/drago/ui/src/utils/formik-utils.js":"32","/home/eschmidt/Workspace/seashell/drago/ui/src/components/separator/index.js":"33","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/list/network-card.js":"34","/home/eschmidt/Workspace/seashell/drago/ui/src/utils/hocs/index.js":"35","/home/eschmidt/Workspace/seashell/drago/ui/src/components/spinner/index.js":"36","/home/eschmidt/Workspace/seashell/drago/ui/src/components/button/index.js":"37","/home/eschmidt/Workspace/seashell/drago/ui/src/components/error-state/index.js":"38","/home/eschmidt/Workspace/seashell/drago/ui/src/components/empty-state/index.js":"39","/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/queries/index.js":"40","/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/text-input/index.js":"41","/home/eschmidt/Workspace/seashell/drago/ui/src/utils/use-localstorage.js":"42","/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/search-input/index.js":"43","/home/eschmidt/Workspace/seashell/drago/ui/src/components/spinner/jellyfish.js":"44","/home/eschmidt/Workspace/seashell/drago/ui/src/components/spinner/dragon.js":"45","/home/eschmidt/Workspace/seashell/drago/ui/src/utils/hocs/with-validity-indicator.js":"46","/home/eschmidt/Workspace/seashell/drago/ui/src/components/icon/index.js":"47","/home/eschmidt/Workspace/seashell/drago/ui/src/components/collapse/index.js":"48","/home/eschmidt/Workspace/seashell/drago/ui/src/components/popover/index.js":"49","/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/mutations/index.js":"50","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/index.js":"51","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/index.js":"52","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/list/index.js":"53","/home/eschmidt/Workspace/seashell/drago/ui/src/components/nav/index.js":"54","/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/tags-input/index.js":"55","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/list/client-card.js":"56","/home/eschmidt/Workspace/seashell/drago/ui/src/components/key-value/index.js":"57","/home/eschmidt/Workspace/seashell/drago/ui/src/components/list/index.js":"58","/home/eschmidt/Workspace/seashell/drago/ui/src/components/back-link/index.js":"59","/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/select-input/index.js":"60","/home/eschmidt/Workspace/seashell/drago/ui/src/components/network-select-input/index.js":"61","/home/eschmidt/Workspace/seashell/drago/ui/src/components/node-select-input/index.js":"62","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/join-network/index.js":"63","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/join-network/network-card.js":"64","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/admit-node/index.js":"65","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/admit-node/node-card.js":"66","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/details/graph/graph.js":"67","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/network-card.js":"68","/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/number-input/index.js":"69","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/interface-card.js":"70","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/connect-peer/index.js":"71","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/connect-peer/peer-card.js":"72","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/connection-card.js":"73","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/details/peer-card.js":"74","/home/eschmidt/Workspace/seashell/drago/ui/src/components/confirmation-dialog/index.js":"75","/home/eschmidt/Workspace/seashell/drago/ui/src/components/confirmation-dialog/dialog.js":"76"},{"size":1238,"mtime":1616452704335,"results":"77","hashOfConfig":"78"},{"size":4915,"mtime":1612290600993,"results":"79","hashOfConfig":"78"},{"size":3043,"mtime":1616011316329,"results":"80","hashOfConfig":"78"},{"size":1447,"mtime":1612292818338,"results":"81","hashOfConfig":"78"},{"size":1127,"mtime":1612285388019,"results":"82","hashOfConfig":"78"},{"size":1477,"mtime":1612382738893,"results":"83","hashOfConfig":"78"},{"size":1340,"mtime":1612788372623,"results":"84","hashOfConfig":"78"},{"size":871,"mtime":1601314266391,"results":"85","hashOfConfig":"78"},{"size":149,"mtime":1612296194433,"results":"86","hashOfConfig":"78"},{"size":143,"mtime":1601314266383,"results":"87","hashOfConfig":"78"},{"size":4015,"mtime":1612377078742,"results":"88","hashOfConfig":"78"},{"size":105,"mtime":1612360419699,"results":"89","hashOfConfig":"78"},{"size":1469,"mtime":1612364572954,"results":"90","hashOfConfig":"78"},{"size":161,"mtime":1601314266387,"results":"91","hashOfConfig":"78"},{"size":230,"mtime":1612287886959,"results":"92","hashOfConfig":"78"},{"size":317,"mtime":1612917249835,"results":"93","hashOfConfig":"78"},{"size":418,"mtime":1612559850261,"results":"94","hashOfConfig":"78"},{"size":332,"mtime":1612381456321,"results":"95","hashOfConfig":"78"},{"size":188,"mtime":1601314266375,"results":"96","hashOfConfig":"78"},{"size":1087,"mtime":1612285067784,"results":"97","hashOfConfig":"78"},{"size":413,"mtime":1612381965732,"results":"98","hashOfConfig":"78"},{"size":862,"mtime":1612284951764,"results":"99","hashOfConfig":"78"},{"size":1823,"mtime":1615840367544,"results":"100","hashOfConfig":"78"},{"size":437,"mtime":1612360364755,"results":"101","hashOfConfig":"78"},{"size":645,"mtime":1612287579741,"results":"102","hashOfConfig":"78"},{"size":2327,"mtime":1612747262215,"results":"103","hashOfConfig":"78"},{"size":5359,"mtime":1612815096861,"results":"104","hashOfConfig":"78"},{"size":4551,"mtime":1616095863508,"results":"105","hashOfConfig":"78"},{"size":5817,"mtime":1616013552053,"results":"106","hashOfConfig":"78"},{"size":2940,"mtime":1612561922182,"results":"107","hashOfConfig":"78"},{"size":712,"mtime":1612287569626,"results":"108","hashOfConfig":"78"},{"size":837,"mtime":1612284851891,"results":"109","hashOfConfig":"78"},{"size":550,"mtime":1612482078956,"results":"110","hashOfConfig":"78"},{"size":2915,"mtime":1615840987670,"results":"111","hashOfConfig":"78"},{"size":134,"mtime":1612366726271,"results":"112","hashOfConfig":"78"},{"size":96,"mtime":1601314266379,"results":"113","hashOfConfig":"78"},{"size":738,"mtime":1612292739000,"results":"114","hashOfConfig":"78"},{"size":1068,"mtime":1612380295014,"results":"115","hashOfConfig":"78"},{"size":1234,"mtime":1616095968575,"results":"116","hashOfConfig":"78"},{"size":5710,"mtime":1616087368821,"results":"117","hashOfConfig":"78"},{"size":890,"mtime":1612560380027,"results":"118","hashOfConfig":"78"},{"size":2442,"mtime":1612364225195,"results":"119","hashOfConfig":"78"},{"size":1467,"mtime":1612482862339,"results":"120","hashOfConfig":"78"},{"size":6269,"mtime":1601314266379,"results":"121","hashOfConfig":"78"},{"size":3645,"mtime":1615917512322,"results":"122","hashOfConfig":"78"},{"size":1202,"mtime":1612367083798,"results":"123","hashOfConfig":"78"},{"size":989,"mtime":1612359032774,"results":"124","hashOfConfig":"78"},{"size":1188,"mtime":1601314266375,"results":"125","hashOfConfig":"78"},{"size":3207,"mtime":1612367014305,"results":"126","hashOfConfig":"78"},{"size":2110,"mtime":1615923167072,"results":"127","hashOfConfig":"78"},{"size":265,"mtime":1612477279104,"results":"128","hashOfConfig":"78"},{"size":13237,"mtime":1616087318169,"results":"129","hashOfConfig":"78"},{"size":3470,"mtime":1615922993786,"results":"130","hashOfConfig":"78"},{"size":800,"mtime":1612287809998,"results":"131","hashOfConfig":"132"},{"size":1984,"mtime":1615918237783,"results":"133","hashOfConfig":"78"},{"size":2943,"mtime":1615921469052,"results":"134","hashOfConfig":"78"},{"size":3029,"mtime":1612377609038,"results":"135","hashOfConfig":"132"},{"size":702,"mtime":1601314266379,"results":"136","hashOfConfig":"78"},{"size":830,"mtime":1612379166472,"results":"137","hashOfConfig":"78"},{"size":2555,"mtime":1615841513914,"results":"138","hashOfConfig":"78"},{"size":2628,"mtime":1616004778039,"results":"139","hashOfConfig":"78"},{"size":2466,"mtime":1612477993815,"results":"140","hashOfConfig":"78"},{"size":3153,"mtime":1612542078233,"results":"141","hashOfConfig":"78"},{"size":2339,"mtime":1612483866487,"results":"142","hashOfConfig":"78"},{"size":3090,"mtime":1612542071133,"results":"143","hashOfConfig":"78"},{"size":1998,"mtime":1612544467255,"results":"144","hashOfConfig":"78"},{"size":5650,"mtime":1612552444754,"results":"145","hashOfConfig":"132"},{"size":4198,"mtime":1612557514865,"results":"146","hashOfConfig":"132"},{"size":925,"mtime":1612804532963,"results":"147","hashOfConfig":"78"},{"size":9379,"mtime":1616088311033,"results":"148","hashOfConfig":"78"},{"size":5217,"mtime":1616005178214,"results":"149","hashOfConfig":"78"},{"size":2074,"mtime":1612565728385,"results":"150","hashOfConfig":"78"},{"size":8746,"mtime":1616011572251,"results":"151","hashOfConfig":"78"},{"size":3990,"mtime":1615992442278,"results":"152","hashOfConfig":"78"},{"size":1924,"mtime":1612916780666,"results":"153","hashOfConfig":"78"},{"size":2238,"mtime":1615992486024,"results":"154","hashOfConfig":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},"134jjv2",{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"157"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"157"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"157"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"157"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},"19msiaq",{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"157"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"157"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"157"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"157"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"157"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},"/home/eschmidt/Workspace/seashell/drago/ui/src/index.js",[],["319","320","321","322","323"],"/home/eschmidt/Workspace/seashell/drago/ui/src/serviceWorker.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/apollo-provider.js",["324"],"import { ApolloProvider, throwServerError } from '@apollo/client'\nimport { ApolloClient } from 'apollo-boost'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloLink } from 'apollo-link'\nimport { setContext } from 'apollo-link-context'\nimport { onError } from 'apollo-link-error'\nimport { RestLink } from 'apollo-link-rest'\nimport log from 'loglevel'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { createNetworkStatusNotifier } from 'react-apollo-network-status'\nimport { useToast } from '_utils/toast-provider'\nimport { REST_API_URL } from '../environment'\nimport { defaults } from './local-state'\n\nconst {\n  link: networkStatusLink,\n  useApolloNetworkStatus: useNetworkStatus,\n} = createNetworkStatusNotifier()\n\nexport async function customFetch(requestInfo, init) {\n  const response = await fetch(requestInfo, init)\n  const res = response.clone()\n\n  if (!res.ok) {\n    const body = await res.json()\n    if (response.status === 404) {\n      throwServerError(res, body, 'Not found error')\n    }\n    if (response.status === 500) {\n      throwServerError(res, body, `Internal error: ${body.Message}`)\n    }\n  }\n  return response\n}\n\nexport const CustomApolloProvider = ({ children }) => {\n  const { error } = useToast()\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({ message, locations, path }) =>\n        log.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      )\n    }\n    if (networkError) {\n      log.error('[Apollo Provider] Network error: ', networkError)\n      if (networkError.statusCode > 300 && networkError.statusCode !== 404) {\n        if (networkError.result && networkError.result.Message) {\n          error(`${networkError.result.Message}`)\n        }\n      }\n      // navigate('/ui/')\n    }\n  })\n\n  const withToken = setContext(() => ({ token: localStorage.getItem('drago.settings.acl.token') }))\n\n  const authLink = new ApolloLink((operation, forward) => {\n    const { token } = operation.getContext()\n    if (token && token !== null) {\n      operation.setContext(({ headers }) => ({\n        headers: {\n          ...headers,\n          'X-Drago-Token': `${token}`,\n        },\n      }))\n    }\n    return forward(operation)\n  })\n\n  const restLink = new RestLink({\n    uri: REST_API_URL,\n    customFetch,\n  })\n\n  const cache = new InMemoryCache({\n    dataIdFromObject: (object) => {\n      // eslint-disable-next-line no-underscore-dangle\n      switch (object.__typename) {\n        default:\n          return object.ID\n      }\n    },\n  })\n  cache.writeData(defaults)\n\n  const client = new ApolloClient({\n    link: networkStatusLink.concat(ApolloLink.from([withToken, errorLink, authLink, restLink])),\n    cache,\n    typeDefs: {},\n    connectToDevTools: true,\n    queryDeduplication: true,\n  })\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>\n}\n\nCustomApolloProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default CustomApolloProvider\n","/home/eschmidt/Workspace/seashell/drago/ui/src/utils/toast-provider.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/styles/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/toast/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/app/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/not-found/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/environment.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/local-state.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/styles/themes/light.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/assets/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/icon-button/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/home/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/settings/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/text/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/box/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/flex/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/containers/header/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/containers/side-nav/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/containers/footer/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/assets/icons/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/assets/illustrations/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/containers/side-nav/brand.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/containers/side-nav/styled.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/settings/tokens/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/list/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/details/index.js",["325"],"import { useMutation, useQuery } from '@apollo/client'\nimport { useLocation, useNavigate, useParams } from '@reach/router'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { icons } from '_assets/'\nimport BackLink from '_components/back-link'\nimport Box from '_components/box'\nimport Button from '_components/button'\nimport { useConfirmationDialog } from '_components/confirmation-dialog'\nimport EmptyState from '_components/empty-state'\nimport Icon from '_components/icon'\nimport List from '_components/list'\nimport NodeSelectInput from '_components/node-select-input'\nimport { Dragon as Spinner } from '_components/spinner'\nimport Text from '_components/text'\nimport { CREATE_INTERFACE, DELETE_INTERFACE } from '_graphql/mutations'\nimport { GET_NETWORK_WITH_INTERFACES } from '_graphql/queries'\nimport AdmitNodeModal from '_modals/admit-node'\nimport PeerCard from './peer-card'\n\nconst Container = styled(Box)`\n  flex-direction: column;\n`\n\nconst StyledIcon = styled(Icon)`\n  border-radius: 4px;\n  background: ${(props) => props.theme.colors.neutralLighter};\n  align-items: center;\n  justify-content: center;\n`\n\n// eslint-disable-next-line react/prop-types\nconst AddNodeWidget = ({ nodes, onAddNode }) => {\n  const [selectedNodeId, setSelectedNodeId] = useState(undefined)\n\n  const handleAddNodeButtonClick = () => {\n    onAddNode(selectedNodeId)\n  }\n\n  const handleSelectedNodeChanged = (id) => {\n    setSelectedNodeId(id)\n  }\n\n  return (\n    <Box alignItems=\"center\" mt=\"24px\">\n      <NodeSelectInput\n        width=\"300px\"\n        nodes={nodes}\n        selectedId={selectedNodeId}\n        onChange={handleSelectedNodeChanged}\n        mr={2}\n      />\n      <Button variant=\"primary\" onClick={handleAddNodeButtonClick}>\n        Add\n      </Button>\n    </Box>\n  )\n}\n\nconst NetworkDetails = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const { networkId } = useParams()\n\n  const { confirm } = useConfirmationDialog()\n\n  const [isAdmitNodeModalOpen, setAdmitNodeModalOpen] = useState(false)\n\n  const getNetworkQuery = useQuery(GET_NETWORK_WITH_INTERFACES, {\n    variables: { id: networkId },\n  })\n\n  const [createInterface, createInterfaceMutation] = useMutation(CREATE_INTERFACE, {\n    variables: { networkId },\n  })\n\n  const [deleteInterface, deleteInterfaceMutation] = useMutation(DELETE_INTERFACE)\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    getNetworkQuery.refetch()\n  }, [location])\n\n  const handleAdmitNodeButtonClick = () => {\n    setAdmitNodeModalOpen(true)\n  }\n\n  const handleAdmitNode = (id) => {\n    createInterface({\n      variables: {\n        networkId,\n        nodeId: id,\n      },\n    })\n      .then(() => {\n        getNetworkQuery.refetch()\n      })\n      .catch(() => {})\n  }\n\n  const handlePeerCardClick = (id) => {\n    navigate(`/ui/clients/${id}`)\n  }\n\n  const handlePeerDelete = (id) => {\n    confirm({\n      title: 'Are you sure?',\n      details: `This will remove the node from the network, destroying its interface and connections.`,\n      isDestructive: true,\n      onConfirm: () => {\n        deleteInterface({\n          variables: { id },\n        })\n          .then(() => {\n            getNetworkQuery.refetch()\n          })\n          .catch(() => {})\n      },\n    })\n  }\n\n  const isLoading =\n    getNetworkQuery.loading || createInterfaceMutation.loading || deleteInterfaceMutation.loading\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  const network = getNetworkQuery.data ? getNetworkQuery.data.result : { Interfaces: [] }\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <Container>\n      <AdmitNodeModal\n        isOpen={isAdmitNodeModalOpen}\n        onAdmit={handleAdmitNode}\n        onClose={() => setAdmitNodeModalOpen(false)}\n      />\n\n      <BackLink to=\"/ui/networks\" text=\"Networks\" mb={3} />\n      <Box alignItems=\"center\" mb={4}>\n        <StyledIcon mr=\"12px\" p={2} icon={<icons.Network />} size=\"48px\" color=\"neutralDarker\" />\n        <div>\n          <Text textStyle=\"title\" mb={1}>\n            {network.Name}\n          </Text>\n          <Text textStyle=\"detail\">{network.ID}</Text>\n        </div>\n      </Box>\n\n      <Box px={3} py={2} border=\"discrete\" alignItems=\"center\">\n        <Box mr={4}>\n          <Text textStyle=\"strong\" fontSize=\"12px\" mr={2}>\n            Address range\n          </Text>\n          <Text textStyle=\"detail\">{network.AddressRange}</Text>\n        </Box>\n      </Box>\n\n      <Box alignItems=\"center\" mt={4} mb={3}>\n        <Text textStyle=\"subtitle\">Nodes</Text>\n        {network.Interfaces.length > 0 && (\n          <Button variant=\"primary\" ml=\"auto\" onClick={handleAdmitNodeButtonClick}>\n            Admit Node\n          </Button>\n        )}\n      </Box>\n      <List>\n        {network.Interfaces.map((el) => (\n          <PeerCard\n            key={el.ID}\n            id={el.NodeID}\n            name={el.Name}\n            address={el.Address}\n            nodeName={el.Node.Name}\n            nodeStatus={el.Node.Status}\n            hasPublicKey={el.HasPublicKey}\n            nodeAdvertiseAddress={el.Node.AdvertiseAddress}\n            onClick={() => handlePeerCardClick(el.Node.ID)}\n            onDelete={() => handlePeerDelete(el.ID)}\n          />\n        ))}\n      </List>\n      {network.Interfaces.length === 0 && (\n        <EmptyState\n          title=\"No nodes.\"\n          description=\"Nodes can be added to a network at any time.\"\n          image={<Icon my={4} icon={<icons.Host />} size=\"48px\" color=\"neutral\" />}\n          extra={\n            <Box alignItems=\"center\" mt=\"24px\">\n              <Button variant=\"primary\" onClick={handleAdmitNodeButtonClick}>\n                Admit Node\n              </Button>\n            </Box>\n          }\n        />\n      )}\n    </Container>\n  )\n}\n\nNetworkDetails.propTypes = {}\n\nexport default NetworkDetails\n","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/new/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/link/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/utils/formik-utils.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/separator/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/list/network-card.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/utils/hocs/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/spinner/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/button/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/error-state/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/empty-state/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/queries/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/text-input/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/utils/use-localstorage.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/search-input/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/spinner/jellyfish.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/spinner/dragon.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/utils/hocs/with-validity-indicator.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/icon/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/collapse/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/popover/index.js",[],["326","327","328","329","330"],"/home/eschmidt/Workspace/seashell/drago/ui/src/graphql/mutations/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/index.js",["331"],"import { useMutation, useQuery } from '@apollo/client'\nimport { useLocation, useParams } from '@reach/router'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { icons } from '_assets/'\nimport BackLink from '_components/back-link'\nimport Box from '_components/box'\nimport Button from '_components/button'\nimport { useConfirmationDialog } from '_components/confirmation-dialog'\nimport EmptyState from '_components/empty-state'\nimport Icon from '_components/icon'\nimport List from '_components/list'\nimport { Dragon as Spinner } from '_components/spinner'\nimport Text from '_components/text'\nimport {\n  CREATE_CONNECTION,\n  CREATE_INTERFACE,\n  DELETE_CONNECTION,\n  DELETE_INTERFACE,\n  UPDATE_CONNECTION,\n  UPDATE_INTERFACE,\n} from '_graphql/mutations'\nimport { GET_CONNECTIONS, GET_INTERFACES, GET_NODE } from '_graphql/queries'\nimport ConnectPeerModal from '_modals/connect-peer'\nimport JoinNetworkModal from '_modals/join-network'\nimport ConnectionCard from './connection-card'\nimport InterfaceCard from './interface-card'\n\nconst Container = styled(Box)`\n  flex-direction: column;\n`\n\nconst SectionTitle = styled(Text)`\n  color: ${(props) => props.theme.colors.neutralLight};\n  font-weight: 600;\n  font-size: 0.76rem;\n  letter-spacing: 0.06rem;\n  text-transform: uppercase;\n`\n\nconst StyledIcon = styled(Icon)`\n  border-radius: 4px;\n  background: ${(props) => props.theme.colors.neutralLighter};\n  align-items: center;\n  justify-content: center;\n`\n\nconst MetaItemContainer = styled(Box)`\n  height: 48px;\n  align-items: center;\n  :not(:last-child) {\n    border-bottom: 1px solid ${(props) => props.theme.colors.neutralLighter};\n  }\n`\n\nconst renderMetaItem = (key, value) => (\n  <MetaItemContainer key={key}>\n    <Text textStyle=\"body\" width=\"240px\" color=\"neutralDark\">\n      {key}\n    </Text>\n    <Text textStyle=\"body\" color=\"neutralDark\">\n      {value}\n    </Text>\n  </MetaItemContainer>\n)\n\nfunction randomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst ClientDetails = () => {\n  const location = useLocation()\n  const { nodeId } = useParams()\n  const { confirm } = useConfirmationDialog()\n\n  const [selectedInterfaceId, setSelectedInterfaceId] = useState()\n  const [selectedConnectionId, setSelectedConnectionId] = useState()\n\n  const [isJoinNetworkModalOpen, setJoinNetworkModalOpen] = useState(false)\n  const [isConnectPeerModalOpen, setConnectPeerModalOpen] = useState(false)\n\n  const getNodeQuery = useQuery(GET_NODE, {\n    variables: { id: nodeId },\n  })\n\n  const getNodeInterfacesQuery = useQuery(GET_INTERFACES, {\n    variables: { nodeId, networkId: '' },\n  })\n\n  const getNodeConnectionsQuery = useQuery(GET_CONNECTIONS, {\n    variables: { nodeId, interfaceId: '', networkId: '' },\n  })\n\n  const [createConnection, createConnectionMutation] = useMutation(CREATE_CONNECTION)\n  const [createInterface, createInterfaceMutation] = useMutation(CREATE_INTERFACE)\n  const [updateInterface, updateInterfaceMutation] = useMutation(UPDATE_INTERFACE)\n  const [updateConnection, updateConnectionMutation] = useMutation(UPDATE_CONNECTION)\n  const [deleteInterface, deleteInterfaceMutation] = useMutation(DELETE_INTERFACE)\n  const [deleteConnection, deleteConnectionMutation] = useMutation(DELETE_CONNECTION)\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    getNodeQuery.refetch()\n    getNodeInterfacesQuery.refetch()\n    getNodeConnectionsQuery.refetch()\n  }, [location])\n\n  useEffect(() => {\n    if (location.state != null) {\n      setTimeout(() => {\n        setSelectedConnectionId(location.state.connectionId)\n      }, 300)\n    }\n  }, [location])\n\n  const handleJoinNetwork = (id) => {\n    createInterface({\n      variables: {\n        nodeId,\n        networkId: id,\n      },\n    })\n      .then(() => {\n        getNodeInterfacesQuery.refetch()\n      })\n      .catch(() => {})\n  }\n\n  const handleConnectToPeer = (networkId, peerInterfaceId) => {\n    const nodeInterface = getNodeInterfacesQuery.data.result.find(\n      (el) => el.NetworkID === networkId\n    )\n\n    createConnection({\n      variables: {\n        connection: {\n          peerSettings: {\n            [nodeInterface.ID]: {},\n            [peerInterfaceId]: {},\n          },\n        },\n      },\n    })\n      .then(() => {\n        getNodeConnectionsQuery.refetch()\n      })\n      .catch(() => {})\n  }\n\n  const handleInterfaceChange = (id, values) => {\n    updateInterface({\n      variables: {\n        id,\n        address: values.address,\n        listenPort: values.listenPort,\n        dns: values.dns,\n        mtu: values.mtu,\n      },\n    })\n      .then(() => {\n        getNodeInterfacesQuery.refetch()\n      })\n      .catch(() => {})\n  }\n\n  const handleInterfaceDelete = (id) => {\n    confirm({\n      title: 'Are you sure?',\n      details:\n        'This will remove the node from the associated network, and destroy all of its connections.',\n      isDestructive: true,\n      onConfirm: () => {\n        deleteInterface({ variables: { id } })\n          .then(() => {\n            getNodeInterfacesQuery.refetch()\n          })\n          .catch(() => {})\n      },\n    })\n  }\n\n  const handleConnectionChange = (id, values) => {\n    const connection = {\n      id,\n      PeerSettings: {\n        [values.interfaceId]: {\n          InterfaceID: values.interfaceId,\n          RoutingRules: {\n            AllowedIPs: values.allowedIPs,\n          },\n        },\n      },\n      persistentKeepalive: values.persistentKeepalive,\n    }\n\n    updateConnection({\n      variables: {\n        id,\n        connection,\n      },\n    })\n      .then(() => {\n        getNodeConnectionsQuery.refetch()\n      })\n      .catch(() => {})\n  }\n\n  const handleConnectionDelete = (id) => {\n    confirm({\n      title: 'Are you sure?',\n      details: `Depending on your network's topology, this might interfere in the node's ability to communicate with others.`,\n      isDestructive: true,\n      onConfirm: () => {\n        deleteConnection({ variables: { id } })\n          .then(() => {\n            getNodeConnectionsQuery.refetch()\n          })\n          .catch(() => {})\n      },\n    })\n  }\n\n  const handleJoinNetworkButtonClick = () => {\n    setJoinNetworkModalOpen(true)\n  }\n\n  const handleConnectToPeerButtonClick = () => {\n    setConnectPeerModalOpen(true)\n  }\n\n  const handleInterfaceCardClick = (id) => {\n    setSelectedInterfaceId(selectedInterfaceId !== id ? id : undefined)\n  }\n\n  const handleConnectionCardClick = (id) => {\n    setSelectedConnectionId(selectedConnectionId !== id ? id : undefined)\n  }\n\n  const isLoading =\n    getNodeQuery.loading ||\n    getNodeInterfacesQuery.loading ||\n    getNodeConnectionsQuery.loading ||\n    createInterfaceMutation.loading ||\n    createConnectionMutation.loading ||\n    deleteInterfaceMutation.loading ||\n    deleteConnectionMutation.loading\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  const node = getNodeQuery.data ? getNodeQuery.data.result : { Interfaces: [], Meta: {} }\n  const interfaces = getNodeInterfacesQuery.data ? getNodeInterfacesQuery.data.result : []\n  const connections = interfaces.reduce(\n    (acc, el) =>\n      acc.concat(\n        (getNodeConnectionsQuery.data ? getNodeConnectionsQuery.data.result : []).map((c) => ({\n          Network: el.Network,\n          FromInterfaceID: el.ID,\n          FromInterfaceAddress: el.Address,\n          FromNodeID: el.NodeID,\n          ToInterfaceID: c.Peers.find((p) => p !== el.ID),\n          ...c,\n        }))\n      ),\n    []\n  )\n\n  return (\n    <Container pb=\"72px\">\n      <JoinNetworkModal\n        isOpen={isJoinNetworkModalOpen}\n        onJoin={handleJoinNetwork}\n        onClose={() => setJoinNetworkModalOpen(false)}\n      />\n      <ConnectPeerModal\n        isOpen={isConnectPeerModalOpen}\n        onJoin={handleConnectToPeer}\n        onClose={() => setConnectPeerModalOpen(false)}\n      />\n      <BackLink text=\"Clients\" to={`/ui/clients`} mb={3} />\n      <Box alignItems=\"center\" mb={4}>\n        <StyledIcon mr=\"12px\" p={2} icon={<icons.Host />} size=\"48px\" color=\"neutralDarker\" />\n        <Box width=\"100%\">\n          <Box flexDirection=\"column\">\n            <Text textStyle=\"title\" mb={1}>\n              {node.Name}\n            </Text>\n            <Text textStyle=\"detail\">{node.ID}</Text>\n          </Box>\n          {interfaces.length > 0 && (\n            <Button variant=\"primary\" ml=\"auto\" onClick={handleJoinNetworkButtonClick}>\n              Join Network\n            </Button>\n          )}\n        </Box>\n      </Box>\n\n      <Box px={3} py={2} border=\"discrete\" alignItems=\"center\">\n        <SectionTitle width=\"160px\">Client details</SectionTitle>\n        <Box mr={4}>\n          <Text textStyle=\"strong\" fontSize=\"12px\" mr={2}>\n            Status\n          </Text>\n          <Text textStyle=\"detail\" color={node.Status === 'ready' ? 'success' : 'danger'}>\n            {node.Status}\n          </Text>\n        </Box>\n\n        <Box mr={4}>\n          <Text textStyle=\"strong\" fontSize=\"12px\" mr={2}>\n            Address\n          </Text>\n          <Text textStyle=\"detail\" mr={3}>\n            {node.Address ? node.Address : 'N/A'}\n          </Text>\n        </Box>\n      </Box>\n\n      <Box alignItems=\"center\" mt={4} mb={3}>\n        <Text textStyle=\"subtitle\">Interfaces</Text>\n      </Box>\n      <List>\n        {interfaces.map((el) => (\n          <InterfaceCard\n            key={el.ID}\n            id={el.ID}\n            showSpinner={updateInterfaceMutation.loading}\n            hasPublicKey={el.HasPublicKey}\n            publicKey={el.PublicKey}\n            name={el.Name}\n            connectionsCount={el.ConnectionsCount}\n            address={el.Address}\n            listenPort={el.ListenPort}\n            dns={el.DNS}\n            mtu={el.MTU}\n            table={el.Table}\n            preUp={el.PreUp}\n            postUp={el.PostUp}\n            preDown={el.PreDown}\n            postDown={el.PostDown}\n            networkId={el.NetworkID}\n            networkName={el.Network.Name}\n            networkAddressRange={el.Network.AddressRange}\n            onChange={(id, values) => handleInterfaceChange(id, values)}\n            onDelete={() => handleInterfaceDelete(el.ID)}\n            onClick={() => handleInterfaceCardClick(el.ID)}\n            isExpanded={selectedInterfaceId === el.ID}\n          />\n        ))}\n      </List>\n\n      {interfaces.length === 0 && (\n        <EmptyState\n          title=\"No networks.\"\n          description=\"By joining a network clients can communicate with each other.\"\n          image={<Icon my={4} icon={<icons.Network />} size=\"48px\" color=\"neutral\" />}\n          extra={\n            <Box alignItems=\"center\" mt=\"24px\">\n              <Button variant=\"primary\" onClick={handleJoinNetworkButtonClick}>\n                Join Network\n              </Button>\n            </Box>\n          }\n        />\n      )}\n\n      <Box alignItems=\"flex-end\" mt={4} mb={3}>\n        <Text textStyle=\"subtitle\">Connections</Text>\n      </Box>\n      <List>\n        {connections.map((el) => (\n          <ConnectionCard\n            key={el.ID}\n            id={el.ID}\n            networkName={el.Network.Name}\n            fromInterfaceId={el.FromInterfaceID}\n            toInterfaceId={el.ToInterfaceID}\n            fromInterfaceAddress={el.FromInterfaceAddress}\n            fromNodeID={el.FromNodeID}\n            createdAt={el.CreatedAt}\n            updatedAt={el.UpdatedAt}\n            showSpinner={updateConnectionMutation.loading}\n            onChange={handleConnectionChange}\n            onDelete={() => handleConnectionDelete(el.ID)}\n            onClick={() => handleConnectionCardClick(el.ID)}\n            isExpanded={selectedConnectionId === el.ID}\n          />\n        ))}\n      </List>\n\n      {interfaces.length > 0 && connections.length === 0 && (\n        <EmptyState\n          title=\"No connections.\"\n          description=\"Connect with peers in your networks to interact wth them.\"\n          image={<Icon my={4} icon={<icons.Connection />} size=\"48px\" color=\"neutral\" />}\n          extra={\n            <Box alignItems=\"center\" mt=\"24px\">\n              <Button variant=\"primary\" onClick={handleConnectToPeerButtonClick}>\n                Connect to Peer\n              </Button>\n            </Box>\n          }\n        />\n      )}\n      {interfaces.length === 0 && (\n        <EmptyState\n          title=\"No connections.\"\n          description=\"Nodes need to join a network before they can connect to peers.\"\n          image={<Icon my={4} icon={<icons.Connection />} size=\"48px\" color=\"neutral\" />}\n          extra={\n            <Box alignItems=\"center\" mt=\"24px\">\n              <Button variant=\"primary\" onClick={handleJoinNetworkButtonClick}>\n                Join Network\n              </Button>\n            </Box>\n          }\n        />\n      )}\n\n      <Text textStyle=\"subtitle\" mt={4} mb={3}>\n        Meta\n      </Text>\n      {Object.keys(node.Meta).length === 0 && (\n        <EmptyState\n          title=\"No metadata.\"\n          description=\"Node does not contain any metadata.\"\n          image={<Icon my={4} icon={<icons.Label />} size=\"48px\" color=\"neutral\" />}\n        />\n      )}\n      {Object.keys(node.Meta).map((k) => renderMetaItem(k, node.Meta[k]))}\n    </Container>\n  )\n}\n\nClientDetails.propTypes = {}\n\nexport default ClientDetails\n","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/list/index.js",["332"],"import { useQuery } from '@apollo/client'\nimport { navigate, useLocation } from '@reach/router'\nimport React, { useEffect, useState } from 'react'\nimport { FixedSizeList } from 'react-window'\nimport InfiniteLoader from 'react-window-infinite-loader'\nimport styled from 'styled-components'\nimport Box from '_components/box'\nimport EmptyState from '_components/empty-state'\nimport ErrorState from '_components/error-state'\nimport SearchInput from '_components/inputs/search-input'\nimport { Dragon as Spinner } from '_components/spinner'\nimport Text from '_components/text'\nimport { GET_NODES } from '_graphql/queries'\nimport { useToast } from '_utils/toast-provider'\nimport ClientCard from './client-card'\n\nconst Container = styled(Box)`\n  flex-direction: column;\n`\n\nconst ClientsListView = () => {\n  const location = useLocation()\n  const { success } = useToast()\n\n  const [searchFilter, setSearchFilter] = useState('')\n  const getNodesQuery = useQuery(GET_NODES, {\n    variables: {},\n  })\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    getNodesQuery.refetch()\n  }, [location])\n\n  const handleClientCardClick = (id) => {\n    navigate(`/ui/clients/${id}`)\n  }\n\n  const nodes = getNodesQuery.data ? getNodesQuery.data.result : []\n\n  const isError = getNodesQuery.error\n  const isLoading = getNodesQuery.loading\n\n  const isEmpty = false\n\n  const filteredNodes = nodes.filter(\n    (el) =>\n      el.ID.includes(searchFilter) ||\n      el.Name.includes(searchFilter) ||\n      el.Status.includes(searchFilter)\n  )\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <Container>\n      <Box mb={3}>\n        <Text textStyle=\"title\">Clients</Text>\n      </Box>\n      <Box my={3}>\n        <SearchInput\n          width=\"100%\"\n          placeholder=\"Search...\"\n          onChange={(value) => setSearchFilter(value)}\n          mr={2}\n        />\n      </Box>\n      {isError ? (\n        <ErrorState />\n      ) : isEmpty ? (\n        <EmptyState description=\"Oops! It seems that you don't have any clients yet registered in this network.\" />\n      ) : (\n        <InfiniteLoader\n          itemCount={nodes.length}\n          isItemLoaded={(index) => index + 1 <= nodes.length}\n          loadMoreItems={() => {}}\n        >\n          {({ onItemsRendered, ref }) => (\n            <FixedSizeList\n              className=\"virtualized-list\"\n              height={72 * filteredNodes.length}\n              itemCount={filteredNodes.length}\n              itemSize={72}\n              onItemsRendered={onItemsRendered}\n              itemData={filteredNodes}\n              ref={ref}\n              width={'100%'}\n            >\n              {({ index, style }) => {\n                const node = filteredNodes[index]\n                return (\n                  <ClientCard\n                    key={node.ID}\n                    id={node.ID}\n                    name={node.Name}\n                    status={node.Status}\n                    address={node.Address}\n                    connectionCount={node.ConnectionsCount}\n                    interfaceCount={node.InterfacesCount}\n                    onClick={() => handleClientCardClick(node.ID)}\n                    updatedAt={node.UpdatedAt}\n                    createdAt={node.CreatedAt}\n                    style={style}\n                  />\n                )\n              }}\n            </FixedSizeList>\n          )}\n        </InfiniteLoader>\n      )}\n    </Container>\n  )\n}\n\nClientsListView.propTypes = {}\n\nexport default ClientsListView\n","/home/eschmidt/Workspace/seashell/drago/ui/src/components/nav/index.js",[],["333","334","335","336","337"],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/tags-input/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/list/client-card.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/key-value/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/list/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/back-link/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/select-input/index.js",["338"],"/* eslint-disable react/prop-types */\nimport React from 'react'\nimport Select from 'react-select'\nimport styled, {css} from 'styled-components'\nimport { layout, space } from 'styled-system'\n\nexport const OptionContainer = styled.div`\n  display: flex;\n  cursor: pointer;\n  height: 24px;\n  padding: 8px;\n  align-items: center;\n  :hover {\n    background-color: ${(props) => props.theme.colors.background2};\n  }\n`\n\nconst DefaultOptionComponent = ({ innerRef, innerProps, ...props }) => (\n  <OptionContainer innerRef={innerRef} {...innerProps} {...props}>\n    {props.data.label}\n  </OptionContainer>\n)\n\nconst DefaultSingleValueComponent = ({ innerRef, innerProps, ...props }) => (\n  <div innerRef={innerRef} {...innerProps} {...props}>\n    {props.data.label}\n  </div>\n)\n\nconst StyledSelect = styled(Select).attrs({\n  classNamePrefix: 'select',\n  styles: {\n    control: (base) => ({\n      ...base,\n      border: 0,\n      boxShadow: 'none',\n    }),\n  },\n})`\n  border: 1px solid ${(props) => props.theme.colors.neutralLighter};\n  height: 48px;\n  width: 100%;\n  ${layout}\n  ${space}\n\n  .select__control {\n    border: none;\n    cursor: pointer;\n    color: ${(props) => props.theme.colors.neutral};\n    background-color: ${(props) => props.theme.colors.neutralLightest};\n\n    height: 100%;\n    .select__value-container {\n      padding-left: 12px;\n      height: 100%;\n      .select__placeholder {\n      }\n    }\n    :hover {\n      border: none;\n      background-color: ${(props) => props.theme.colors.neutralLightest};\n    }\n  }\n\n  .select__menu {\n    z-index: 2;\n    color: ${(props) => props.theme.colors.neutral};\n    background-color: ${(props) => props.theme.colors.neutralLightest};\n  }\n\n  .select__control--is-focused {\n    box-shadow: none;\n    border: none;\n  }\n\n  .select__control--is-disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    pointer-events: none;\n  }\n\n  .select__control--is-focused.select__control--menu-is-open {\n    box-shadow: none;\n    border-radius: 2px;\n    border: 1px solid ${(props) => props.theme.colors.primary};\n    :hover {\n      border: 1px solid ${(props) => props.theme.colors.primary};\n    }\n  }\n`\n\nconst SelectInput = ({ optionComponent, singleValueComponent, disabled, ...props }) => (\n  <StyledSelect\n    {...props}\n    isDisabled={disabled}\n    components={{ Option: optionComponent, SingleValue: singleValueComponent }}\n  />\n)\n\nSelectInput.defaultProps = {\n  disabled: false,\n  optionComponent: DefaultOptionComponent,\n  singleValueComponent: DefaultSingleValueComponent,\n  options: [],\n}\n\nexport default SelectInput\n","/home/eschmidt/Workspace/seashell/drago/ui/src/components/network-select-input/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/node-select-input/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/modals/join-network/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/modals/join-network/network-card.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/modals/admit-node/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/modals/admit-node/node-card.js",["339"],"import PropTypes from 'prop-types'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\nimport { icons } from '_assets/'\nimport Box from '_components/box'\nimport Icon from '_components/icon'\nimport Text from '_components/text'\n\nconst Container = styled(Box).attrs({\n  display: 'flex',\n  p: 2,\n})`\n  height: max-content;\n  cursor: pointer;\n  align-items: center;\n  border-bottom: 1px solid ${(props) => props.theme.colors.neutralLighter};\n  :last-child {\n    border-bottom: none;\n  }\n`\n\nconst StyledIcon = styled(Icon)`\n  width: 36px;\n  height: 36px;\n  padding: 4px;\n  border-radius: 4px;\n  background: ${(props) => props.theme.colors.neutralLighter};\n  align-items: center;\n  justify-content: center;\n`\n\nconst Badge = styled(Box)`\n  color: ${(props) => props.theme.colors.neutralDark};\n  background: ${(props) => props.theme.colors.neutralLighter};\n  padding: 4px 8px;\n  border-radius: 2px;\n  width: 48px;\n  justify-content: center;\n`\nconst SelectionIndicator = styled(Box).attrs({})`\n  border: 1px solid ${(props) => props.theme.colors.neutralLight};\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  ${(props) =>\n    props.isSelected &&\n    css`\n      background: ${props.theme.colors.neutralDarker};\n    `};\n`\n\nconst NodeCard = ({ id, name, isSelected, onClick }) => (\n  <Container onClick={() => onClick(id)}>\n    <Box>\n      <SelectionIndicator my=\"auto\" mr={2} isSelected={isSelected} />\n      <StyledIcon ml=\"auto\" mr=\"12px\" icon={<icons.Host />} color=\"neutralDarker\" />\n      <Box flexDirection=\"column\">\n        <Text textStyle=\"subtitle\" fontSize=\"14px\">\n          {name}\n        </Text>\n        <Text textStyle=\"detail\" fontSize=\"12px\">\n          {id}\n        </Text>\n      </Box>\n    </Box>\n  </Container>\n)\n\nNodeCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  onClick: PropTypes.func,\n}\n\nNodeCard.defaultProps = {\n  onClick: () => {},\n  isSelected: false,\n}\n\nexport default NodeCard\n","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/details/graph/graph.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/network-card.js",["340","341","342"],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/inputs/number-input/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/interface-card.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/modals/connect-peer/index.js",["343"],"import { useLazyQuery, useQuery } from '@apollo/client'\nimport { useParams } from '@reach/router'\nimport PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport Modal from 'styled-react-modal'\nimport { icons } from '_assets/'\nimport Box from '_components/box'\nimport Button from '_components/button'\nimport IconButton from '_components/icon-button'\nimport SearchInput from '_components/inputs/search-input'\nimport List from '_components/list'\nimport NetworkSelectInput from '_components/network-select-input'\nimport Text from '_components/text'\nimport { GET_NETWORKS, GET_NODE_WITH_INTERFACES, GET_PEERS } from '_graphql/queries'\nimport PeerCard from './peer-card'\n\nconst Container = styled(Box)`\n  height: 600px;\n  width: 400px;\n  background: ${(props) => props.theme.colors.white};\n  border: 1px solid;\n  border-color: ${(props) => props.theme.colors.neutralLighter};\n  border-radius: 4px;\n  padding: 32px;\n  flex-direction: column;\n  padding-bottom: 32px;\n  position: relative;\n`\n\nconst CloseButton = styled(IconButton).attrs({\n  icon: <icons.Times />,\n  size: '32px',\n  color: 'neutralLight',\n})`\n  position: absolute;\n  top: 0;\n  right: 0;\n`\n\nconst ConnectPeerModal = ({ isOpen, onJoin, onClose }) => {\n  const { nodeId } = useParams()\n\n  const [networks, setNetworks] = useState([])\n  const [selectedNetwork, setSelectedNetwork] = useState()\n\n  const [peers, setPeers] = useState([])\n  const [selectedPeer, setSelectedPeer] = useState()\n\n  const [searchString, setSearchString] = useState('')\n\n  const getNodeQuery = useQuery(GET_NODE_WITH_INTERFACES, {\n    variables: { id: nodeId },\n  })\n\n  const handleGetNetworksQueryData = (data) => {\n    setNetworks(data.result)\n  }\n\n  const handleGetPeersQueryData = (data) => {\n    setPeers(data.result)\n  }\n\n  const getNetworksQuery = useQuery(GET_NETWORKS, {\n    onCompleted: handleGetNetworksQueryData,\n  })\n\n  const [getPeers, getPeersQuery] = useLazyQuery(GET_PEERS, {\n    onCompleted: handleGetPeersQueryData,\n  })\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  useEffect(() => {\n    if (isOpen) {\n      setPeers([])\n      setNetworks([])\n      setSelectedPeer(undefined)\n      setSelectedNetwork(undefined)\n      if (getPeersQuery.called) {\n        getNetworksQuery.refetch({}).then((res) => handleGetNetworksQueryData(res.data))\n      }\n      getPeersQuery.refetch()\n      setSearchString('')\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    if (getPeersQuery.called) {\n      getPeersQuery.refetch({ nodeId: '', networkId: selectedNetwork })\n    } else {\n      getPeers({\n        variables: { nodeId: '', networkId: selectedNetwork },\n      })\n    }\n  }, [selectedNetwork])\n\n  const handleSelectedNetworkChanged = (id) => {\n    setSelectedNetwork(id)\n    setSelectedPeer(undefined)\n  }\n\n  const handlePeerCardClick = (id) => {\n    setSelectedPeer(selectedPeer !== id ? id : undefined)\n  }\n\n  const handleJoinButtonClick = () => {\n    onJoin(selectedNetwork, selectedPeer)\n    onClose()\n  }\n\n  const node = getNodeQuery.data ? getNodeQuery.data.result : { Interfaces: [] }\n\n  // Filter network options to include only those containing the current node\n  const nodeNetworkIDs = node.Interfaces.map((el) => el.NetworkID)\n  const nodeNetworks = networks.filter(\n    (el) => nodeNetworkIDs.find((id) => id === el.ID) !== undefined\n  )\n\n  // Find node interface within the selected network\n  const sourceInterface = node.Interfaces.find((el) => el.NetworkID === selectedNetwork)\n  const targetInterface = peers.find((el) => el.ID === selectedPeer)\n\n  const filteredPeers = peers\n    .filter((el) => el.ID !== sourceInterface.ID) // Do not show source interface as an option\n    .filter((el) => (el.Name !== null ? el.Name.includes(searchString) : true)) // Filter peers based on search query\n\n  return (\n    <Modal isOpen={isOpen} onBackgroundClick={onClose} onEscapeKeydown={onClose}>\n      <Container>\n        <CloseButton onClick={onClose} />\n        <Text textStyle=\"title\" mb={3}>\n          Connect to Peer\n        </Text>\n        <NetworkSelectInput\n          networks={nodeNetworks}\n          mb={3}\n          onChange={handleSelectedNetworkChanged}\n        />\n        <SearchInput\n          onChange={(s) => setSearchString(s)}\n          mb={3}\n          placeholder=\"Search for peers...\"\n        />\n        <List pb={3}>\n          {filteredPeers.map((el) => (\n            <PeerCard\n              key={el.ID}\n              id={el.ID}\n              name={el.Node.Name}\n              address={el.Address}\n              isSelected={el.ID === selectedPeer}\n              onClick={() => handlePeerCardClick(el.ID)}\n            />\n          ))}\n        </List>\n        <Button\n          disabled={selectedPeer === undefined}\n          variant=\"primary\"\n          width=\"auto\"\n          height=\"48px\"\n          mt=\"auto\"\n          onClick={handleJoinButtonClick}\n        >\n          Connect\n        </Button>\n      </Container>\n    </Modal>\n  )\n}\n\nConnectPeerModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onJoin: PropTypes.func,\n  onClose: PropTypes.func,\n}\n\nConnectPeerModal.defaultProps = {\n  isOpen: false,\n  onJoin: () => {},\n  onClose: () => {},\n}\n\nexport default ConnectPeerModal\n","/home/eschmidt/Workspace/seashell/drago/ui/src/modals/connect-peer/peer-card.js",["344"],"import PropTypes from 'prop-types'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\nimport { icons } from '_assets/'\nimport Box from '_components/box'\nimport Icon from '_components/icon'\nimport Text from '_components/text'\n\nconst Container = styled(Box).attrs({\n  display: 'flex',\n  p: 2,\n})`\n  height: max-content;\n  cursor: pointer;\n  align-items: center;\n  border-bottom: 1px solid ${(props) => props.theme.colors.neutralLighter};\n  :last-child {\n    border-bottom: none;\n  }\n`\n\nconst StyledIcon = styled(Icon)`\n  width: 36px;\n  height: 36px;\n  padding: 4px;\n  border-radius: 4px;\n  background: ${(props) => props.theme.colors.neutralLighter};\n  align-items: center;\n  justify-content: center;\n`\n\nconst Badge = styled(Box)`\n  color: ${(props) => props.theme.colors.neutralDark};\n  background: ${(props) => props.theme.colors.neutralLighter};\n  padding: 4px 8px;\n  border-radius: 2px;\n  width: 48px;\n  justify-content: center;\n`\nconst SelectionIndicator = styled(Box).attrs({})`\n  border: 1px solid ${(props) => props.theme.colors.neutralLight};\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  ${(props) =>\n    props.isSelected &&\n    css`\n      background: ${props.theme.colors.neutralDarker};\n    `};\n`\n\nconst PeerCard = ({ id, name, address, isSelected, onClick }) => (\n  <Container onClick={() => onClick(id)}>\n    <Box>\n      <SelectionIndicator my=\"auto\" mr={2} isSelected={isSelected} />\n      <StyledIcon ml=\"auto\" mr=\"12px\" icon={<icons.Host />} color=\"neutralDarker\" />\n      <Box flexDirection=\"column\">\n        <Text textStyle=\"subtitle\" fontSize=\"14px\">\n          {name}\n        </Text>\n        <Text textStyle=\"detail\" fontSize=\"12px\">\n          {address ? `${address}` : 'NA'}\n        </Text>\n      </Box>\n    </Box>\n  </Container>\n)\n\nPeerCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  onClick: PropTypes.func,\n}\n\nPeerCard.defaultProps = {\n  onClick: () => {},\n  isSelected: false,\n}\n\nexport default PeerCard\n","/home/eschmidt/Workspace/seashell/drago/ui/src/views/clients/details/connection-card.js",["345","346"],"import { useQuery } from '@apollo/client'\nimport { useFormik } from 'formik'\nimport PropTypes from 'prop-types'\nimport React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport * as Yup from 'yup'\nimport { icons } from '_assets/'\nimport Box from '_components/box'\nimport Button from '_components/button'\nimport Icon from '_components/icon'\nimport IconButton from '_components/icon-button'\nimport NumberInput from '_components/inputs/number-input'\nimport TagsInput from '_components/inputs/tags-input'\nimport Link from '_components/link'\nimport Separator from '_components/separator'\nimport { Dragon as Spinner } from '_components/spinner'\nimport Text from '_components/text'\nimport { GET_CONNECTION, GET_PEER } from '_graphql/queries'\n\nconst Container = styled(Box).attrs({\n  border: 'discrete',\n})`\n  flex-direction: column;\n  :not(:last-child) {\n    border-bottom: none;\n  }\n`\n\nconst HeaderContainer = styled(Box).attrs({\n  px: 3,\n})`\n  display: grid;\n  grid-template-columns: 330px 30px 120px 120px auto;\n\n  height: 72px;\n  cursor: pointer;\n  align-items: center;\n`\n\nconst HiddenContentContainer = styled(Box).attrs({\n  p: 3,\n})`\n  flex-direction: column;\n`\n\nconst StyledIcon = styled(Icon)`\n  width: 36px;\n  height: 36px;\n  padding: 4px;\n  border-radius: 4px;\n  background: ${(props) => props.theme.colors.neutralLighter};\n  align-items: center;\n  justify-content: center;\n`\n\nconst Badge = styled(Box)`\n  color: ${(props) => props.theme.colors.neutralDark};\n  background: ${(props) => props.theme.colors.neutralLighter};\n  padding: 4px 8px;\n  border-radius: 2px;\n  justify-content: center;\n`\n\nconst ConfigurationGrid = styled(Box)`\n  display: grid;\n  grid-template: 1fr / repeat(12, 1fr);\n  grid-column-gap: 8px;\n  grid-row-gap: 16px;\n`\n\nconst StyledLink = styled(Link)`\n  color: ${(props) => props.theme.colors.neutralDarker};\n  font-size: 12px;\n  line-height: inherit;\n  font-weight: bold;\n  display: inline-flex;\n  align-items: center;\n  :hover {\n    text-decoration: underline;\n  }\n`\n\nconst StyledSpinner = styled(Spinner).attrs({\n  size: 40,\n})`\n  position: relative;\n  display: flex;\n  align-items: center;\n`\n\nconst ConnectionCard = ({\n  id,\n  networkName,\n  fromInterfaceId,\n  toInterfaceId,\n  onClick,\n  onChange,\n  onDelete,\n  isExpanded,\n  showSpinner,\n  createdAt,\n  updatedAt,\n}) => {\n  const formik = useFormik({\n    initialValues: {\n      id,\n      allowedIPs: [],\n      persistentKeepalive: null,\n      interfaceId: fromInterfaceId,\n    },\n    enableReinitialize: true,\n    validationSchema: Yup.object().shape({\n      persistentKeepalive: Yup.number().positive().integer().required().nullable(),\n    }),\n    validateOnBlur: true,\n    validateOnMount: true,\n    validateOnChange: true,\n  })\n\n  const handleGetConnectionsQueryData = (data) => {\n    const fromInterfaceSettings = data.result.PeerSettings[fromInterfaceId]\n    formik.setFieldValue('allowedIPs', fromInterfaceSettings.RoutingRules.AllowedIPs)\n    formik.setFieldValue('persistentKeepalive', data.result.PersistentKeepalive)\n  }\n\n  const getConnectionQuery = useQuery(GET_CONNECTION, {\n    variables: { connectionId: id },\n    onCompleted: handleGetConnectionsQueryData,\n  })\n\n  const getSelfQuery = useQuery(GET_PEER, {\n    variables: { interfaceId: fromInterfaceId },\n  })\n\n  const getPeerQuery = useQuery(GET_PEER, {\n    variables: { interfaceId: toInterfaceId },\n  })\n\n  useEffect(() => {\n    if (isExpanded) {\n      getConnectionQuery.refetch()\n      getSelfQuery.refetch()\n      getPeerQuery.refetch()\n    }\n  }, [isExpanded])\n\n  const handleClick = () => {\n    onClick()\n  }\n\n  const handleDeleteButtonClick = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    onDelete()\n  }\n\n  const handleSaveButtonClick = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    onChange(id, formik.values)\n  }\n\n  const self = getSelfQuery.data ? getSelfQuery.data.result : { ID: '', Node: { ID: '' } }\n  const peer = getPeerQuery.data ? getPeerQuery.data.result : { ID: '', Node: { ID: '' } }\n\n  return (\n    <Container>\n      <HeaderContainer onClick={handleClick}>\n        <Box>\n          <StyledIcon mr=\"12px\" icon={<icons.Connection />} color=\"neutralDarker\" />\n          <Box flexDirection=\"column\">\n            <Text textStyle=\"subtitle\" fontSize=\"14px\">\n              {id.split('-')[0]}\n            </Text>\n            <Text textStyle=\"detail\" fontSize=\"12px\">\n              Connected to{' '}\n              <StyledLink to={`/ui/clients/${peer.Node.ID}/`} state={{ connectionId: id }}>\n                {toInterfaceId !== null && toInterfaceId.split('-')[0]} ({peer.Node.Name})\n                <Icon icon={<icons.ExternalLink />} size=\"10px\" color=\"neutralDarker\" ml=\"1\" />\n              </StyledLink>\n            </Text>\n          </Box>\n        </Box>\n\n        <Box width=\"48px\" justifyContent=\"center\" />\n\n        <Badge alignItems=\"center\" justifySelf=\"center\">\n          <Icon mr={1} icon={<icons.Interface />} color=\"neutralDarker\" size=\"16px\" />\n          <Text textStyle=\"detail\" fontSize=\"12px\">\n            {fromInterfaceId !== null && fromInterfaceId.split('-')[0]}\n          </Text>\n        </Badge>\n\n        <Badge alignItems=\"center\" justifySelf=\"center\">\n          <Icon mr={1} icon={<icons.Network />} color=\"neutralDarker\" size=\"16px\" />\n          <Text textStyle=\"detail\" fontSize=\"12px\">\n            {networkName}\n          </Text>\n        </Badge>\n\n        <IconButton\n          icon={<icons.Trash />}\n          color=\"neutralDark\"\n          size=\"16px\"\n          ml=\"auto\"\n          onClick={handleDeleteButtonClick}\n          style={{ visibility: isExpanded ? 'hidden' : 'visible' }}\n        />\n      </HeaderContainer>\n      {isExpanded && (\n        <>\n          <Separator mx={'10px'} width=\"auto\" />\n          <HiddenContentContainer>\n            <Box alignItems=\"center\" mb={2}>\n              <Text textStyle=\"subtitle\" fontSize=\"16px\">\n                Configuration\n              </Text>\n            </Box>\n\n            <ConfigurationGrid>\n              <Box flexDirection=\"column\" gridColumn=\"1 / span 10\">\n                <Text textStyle=\"detail\">Allowed IPs</Text>\n                <TagsInput\n                  value={formik.values.allowedIPs.map((el) => ({ label: el, value: el }))}\n                  onChange={(values) =>\n                    formik.setFieldValue(\n                      'allowedIPs',\n                      values === null ? [] : values.map((el) => el.value)\n                    )\n                  }\n                  placeholder=\"192.168.0.1/24\"\n                />\n              </Box>\n\n              <Box flexDirection=\"column\" gridColumn=\"11 / span 2\">\n                <Text textStyle=\"detail\" mb={'14px'}>\n                  Persistent Keepalive\n                </Text>\n                <NumberInput\n                  name=\"persistentKeepalive\"\n                  {...formik.getFieldProps('persistentKeepalive')}\n                  placeholder={1000}\n                />\n              </Box>\n            </ConfigurationGrid>\n            <Box alignItems=\"center\" mt={3}>\n              <div>\n                <Text textStyle=\"detail\">\n                  * This configuration applies to interface <strong>{self.ID.split('-')[0]}</strong>{' '}\n                  {self.Address ? `(${self.Address})` : ''} of the node identified by{' '}\n                  <strong>{self.Node.ID.split('-')[0]}</strong>.\n                </Text>\n                <Text textStyle=\"detail\">\n                  ** Interface <strong>{self.ID.split('-')[0]}</strong> is connected to interface{' '}\n                  <strong>{peer.ID.split('-')[0]}</strong> {peer.Address ? `(${peer.Address})` : ''}{' '}\n                  on node <strong>{peer.Node.ID.split('-')[0]}</strong>\n                </Text>\n              </div>\n              <Box ml=\"auto\" alignItems=\"center\">\n                {showSpinner && <StyledSpinner />}\n                <Button ml={3} variant=\"primary\" height=\"40px\" onClick={handleSaveButtonClick}>\n                  Save\n                </Button>\n              </Box>\n            </Box>\n          </HiddenContentContainer>\n        </>\n      )}\n    </Container>\n  )\n}\n\nConnectionCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  networkName: PropTypes.string.isRequired,\n  fromInterfaceId: PropTypes.string.isRequired,\n  toInterfaceId: PropTypes.string.isRequired,\n  updatedAt: PropTypes.string,\n  createdAt: PropTypes.string,\n  showSpinner: PropTypes.bool,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  onDelete: PropTypes.func,\n  isExpanded: PropTypes.bool,\n}\n\nConnectionCard.defaultProps = {\n  createdAt: undefined,\n  updatedAt: undefined,\n  showSpinner: false,\n  onClick: () => {},\n  onChange: () => {},\n  onDelete: () => {},\n  isExpanded: false,\n}\n\nexport default ConnectionCard\n","/home/eschmidt/Workspace/seashell/drago/ui/src/views/networks/details/peer-card.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/confirmation-dialog/index.js",[],"/home/eschmidt/Workspace/seashell/drago/ui/src/components/confirmation-dialog/dialog.js",[],{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","replacedBy":"354"},{"ruleId":"355","replacedBy":"356"},{"ruleId":"357","severity":1,"message":"358","line":18,"column":27,"nodeType":"359","messageId":"360","endLine":18,"endColumn":43},{"ruleId":"357","severity":1,"message":"361","line":33,"column":7,"nodeType":"359","messageId":"360","endLine":33,"endColumn":20},{"ruleId":"347","replacedBy":"362"},{"ruleId":"349","replacedBy":"363"},{"ruleId":"351","replacedBy":"364"},{"ruleId":"353","replacedBy":"365"},{"ruleId":"355","replacedBy":"366"},{"ruleId":"357","severity":1,"message":"367","line":67,"column":10,"nodeType":"359","messageId":"360","endLine":67,"endColumn":19},{"ruleId":"357","severity":1,"message":"368","line":23,"column":11,"nodeType":"359","messageId":"360","endLine":23,"endColumn":18},{"ruleId":"347","replacedBy":"369"},{"ruleId":"349","replacedBy":"370"},{"ruleId":"351","replacedBy":"371"},{"ruleId":"353","replacedBy":"372"},{"ruleId":"355","replacedBy":"373"},{"ruleId":"357","severity":1,"message":"374","line":4,"column":17,"nodeType":"359","messageId":"360","endLine":4,"endColumn":20},{"ruleId":"357","severity":1,"message":"375","line":32,"column":7,"nodeType":"359","messageId":"360","endLine":32,"endColumn":12},{"ruleId":"357","severity":1,"message":"376","line":53,"column":7,"nodeType":"359","messageId":"360","endLine":53,"endColumn":25},{"ruleId":"357","severity":1,"message":"377","line":65,"column":58,"nodeType":"359","messageId":"360","endLine":65,"endColumn":68},{"ruleId":"357","severity":1,"message":"378","line":65,"column":70,"nodeType":"359","messageId":"360","endLine":65,"endColumn":77},{"ruleId":"357","severity":1,"message":"379","line":124,"column":9,"nodeType":"359","messageId":"360","endLine":124,"endColumn":24},{"ruleId":"357","severity":1,"message":"375","line":32,"column":7,"nodeType":"359","messageId":"360","endLine":32,"endColumn":12},{"ruleId":"357","severity":1,"message":"380","line":101,"column":3,"nodeType":"359","messageId":"360","endLine":101,"endColumn":12},{"ruleId":"357","severity":1,"message":"381","line":102,"column":3,"nodeType":"359","messageId":"360","endLine":102,"endColumn":12},"lines-around-directive",["382"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'useNetworkStatus' is assigned a value but never used.","Identifier","unusedVar","'AddNodeWidget' is assigned a value but never used.",["382"],[],[],[],[],"'randomInt' is defined but never used.","'success' is assigned a value but never used.",["382"],[],[],[],[],"'css' is defined but never used.","'Badge' is assigned a value but never used.","'SelectionIndicator' is assigned a value but never used.","'isSelected' is defined but never used.","'onClick' is defined but never used.","'targetInterface' is assigned a value but never used.","'createdAt' is defined but never used.","'updatedAt' is defined but never used.","padding-line-between-statements"]