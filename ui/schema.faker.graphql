# ***************************** 
# ****** COMMON SCALARS *******
# *****************************

scalar DateTime
scalar UUID


# ***************************** 
# ***** COMMON INTERFACES *****
# *****************************

interface Node {
  id: ID! @fake(type: uuid)
}


# ***************************** 
# ******** PAGE_INFO **********
# *****************************

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
	endCursor: String
}

# ***************************** 
# **** ORGANIZATION MEMBER ****
# *****************************

enum OrganizationMemberRole {
  MANAGER
  DEVELOPER
  SUPPORT
  BILLER
}

type OrganizationMemberConnection {
  edges: [OrganizationMemberEdge]
	nodes: [User]
	pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationMemberEdge {
  node: User
  role: OrganizationMemberRole
  cursor: String!  
}


# ***************************** 
# ****** ORGANIZATION *********
# *****************************

type Organization implements Node {
  id: ID! @fake(type: uuid)
  databaseId: ID! @fake(type: uuid)
  
  name: String! @fake(type: companyName)
  description: String! @fake(type: lorem)
  
  owner: User!
  
  createdAt: DateTime! @fake(type: pastDate)
  modifiedAt: DateTime! @fake(type: pastDate) 
    
  isUserDefault: Boolean! @examples(values: [true, false])
  
  members(
    before: String
    after: String
    first: Int
    last: Int
  ): OrganizationMemberConnection!
}

type OrganizationConnection {
  edges: [OrganizationEdge]
	nodes: [Organization]
	pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationEdge {
 	cursor: String!
  node: Organization
}

# ***************************** 
# *** PROJECT COLLABORATOR ****
# *****************************

enum ProjectCollaboratorRole {
  MANAGER
  DEVELOPER
  SUPPORT
}

type ProjectCollaboratorConnection {
  edges: [ProjectCollaboratorEdge]
	nodes: [User]
	pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectCollaboratorEdge {
  node: User
  role: ProjectCollaboratorRole
  cursor: String!  
}

# ***************************** 
# ********* PROJECT ***********
# *****************************

type Project implements Node {
	  id: ID! @fake(type: uuid)
  	databaseId: UUID! @fake(type: uuid)
  
  	name: String! @fake(type: domainName)
  	description: String @fake(type: lorem)
  
  	collaborators(
        before: String
        after: String
        before: String
        first: Int
        last: Int
    ): ProjectCollaboratorConnection!
}


type ProjectConnection {
  edges: [ProjectEdge]
	nodes: [Project]
	pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectEdge {
 	cursor: String!
  node: Project
}

# ***************************** 
# *********** USER ************
# *****************************

type User implements Node {
  
  id: ID! @fake(type: uuid)
  databaseId: UUID! @fake(type: uuid)
  
  username: String! @fake(type: uuid)
  email: String! @fake(type: email)
  
  firstName: String! @fake(type: firstName)
  lastName: String! @fake(type: lastName)
  
  gravatar: String @fake(type: avatarUrl)
  
  bio: String @fake(type: lorem)
  
  createdAt: DateTime! @fake(type: pastDate)
  modifiedAt: DateTime! @fake(type: pastDate)
  
  organizations(
    before: String
    after: String
    before: String
    first: Int
    last: Int): OrganizationConnection!
  
  projects(
    before: String
    after: String
    first: Int
    last: Int): ProjectConnection!
}

type Query {
  viewer: User
}
